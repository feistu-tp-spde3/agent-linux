/***************************************************************************
 *   Copyright (C) 2010 by Peter Krejci,,,   *
 *   info@peterkrejci.sk   *
 *                                                                         *
 *   All rights reserved.                                                  *
 *                                                                         *
 *   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: *
 *     * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. *
 *     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. *
 *     * Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. *
 *                                                                         *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   *
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT     *
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR *
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR *
 *   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, *
 *   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,   *
 *   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR    *
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF *
 *   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  *
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS    *
 *   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.          *
 ***************************************************************************/
#include <iostream>
#include <fstream>
#include <sstream>
#include <ctime>

using namespace std;

#include "config_hash.h"

#include "../packetsensor.h"

#ifdef DEBUG
#include "../debugger/debugger.h"
using namespace debugger;
#endif

#include "../exceptions/ewrite_file_error.h"

using namespace exceptions;

#include "md5.h" //3rd party md5 function

namespace config
{

Config_hash::Config_hash()
{
}


Config_hash::~Config_hash()
{
}

//---------private methods---------
/**
 * Generate hash from current time (timestamp) using the 3rd party md5 function.
 */
void Config_hash::generate_hash()
{
    int timestamp = time(0);

    //convert timestamp to string
    ostringstream stm_timestamp;
    stm_timestamp << timestamp;

    string new_hash(md5(stm_timestamp.str()));

    #ifdef DEBUG
        Debugger() << "New hash = " << new_hash << endl;
    #endif

    m_hash = new_hash;
}

/**
 * read hash from file
 * @return true if file exists and contains hash
 */
bool Config_hash::read_hash()
{
    ifstream hash_file(CONFIG_PATH HASH_FILENAME);

    if (hash_file.is_open()) {
        //our hash string should be on first uncommented line
        string line;

        while (getline(hash_file, line)) {
            if (line[0] != '#') 
            { //# represents comment
                
                #ifdef DEBUG
                    Debugger() << "Hash = " << line << endl;
                #endif
            
                m_hash = line;
                return true;
            }
        }
        hash_file.close();
    }

    return false;
}

/**
 * save generated hash in file
 */
void Config_hash::save_hash()
{
    ofstream hash_file(CONFIG_PATH HASH_FILENAME);

    if (hash_file.is_open()) {
        //comment
        hash_file << "#hash identifier - DO NOT EDIT THIS FILE!" << endl;
        hash_file << m_hash;
        hash_file.close();
    } 
    else {
        throw EWrite_file_error();
    }
}

//---------public methods---------

/**
 * check whether hash exists and if not, generate and save it
 */
void Config_hash::init()
{
    if (read_hash() == false) {
        generate_hash();

        save_hash();
    }
}

}
